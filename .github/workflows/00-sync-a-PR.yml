name: 00-sync-a-PR

# This workflow checks if all required checks have passed before allowing a pull request to be merged.
# It is triggered on pull request events and uses the GitHub CLI to check the status of checks.
# The workflow will wait for all other checks to finish before proceeding.
# If any of the required checks fail, the workflow will exit with an error.

on:
  workflow_dispatch: # Allows manual triggering of the workflow
    inputs:
      pr_url:
        type: string
        description: URL of a cs156 project repo pull request with a dokku deployment url in the description
   
env:
  GITHUB_TOKEN: ${{ secrets.PAT }} # Store your Personal Access Token in Secrets

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4


      - name: Get values from PR URL
        id: get_pr_info
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
          PR_URL: ${{ github.event.inputs.pr_url }}
        run: |
          rm -rf pr_info.json
          python <<EOF > pr_info.json
          import os
          import github_pr_funcs
          GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
          pr_url = os.getenv("PR_URL")
          if not pr_url:
            raise ValueError("No PR URL provided. Please provide a valid PR URL.")
          print(github_pr_funcs.get_dokku_command_elements_from_raw_pr_url(GITHUB_TOKEN, pr_url))
          EOF
       
          # Parse the JSON output to extract values
          echo "APP=$(cat pr_info.json | jq -r '.app')" >> "$GITHUB_OUTPUT"
          echo "REPO=$(cat pr_info.json | jq -r '.repo')" >> "$GITHUB_OUTPUT"
          echo "BRANCH=$(cat pr_info.json | jq -r '.branch')" >> "$GITHUB_OUTPUT"
          echo "DOKKU=$(cat pr_info.json | jq -r '.dokku')" >> "$GITHUB_OUTPUT"

  
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H csil.cs.ucsb.edu >> ~/.ssh/known_hosts
        shell: bash

      - name: git:sync
        env:
          APP: ${{ steps.get_pr_info.outputs.APP }}
          REPO: ${{ steps.get_pr_info.outputs.REPO }}
          BRANCH: ${{ steps.get_pr_info.outputs.BRANCH }}
          DOKKU: ${{ steps.get_pr_info.outputs.DOKKU }}
        run: |
          echo "::notice:: Executing dokku config:set for SOURCE_REPO..."
          ssh -i ~/.ssh/id_ed25519 pconrad@csil.cs.ucsb.edu ${{env.DOKKU}} config:set --no-restart ${{ env.APP }} SOURCE_REPO=${{ env.REPO }}
          echo "::group:: Executing dokku git:sync"
          ssh -i ~/.ssh/id_ed25519 pconrad@csil.cs.ucsb.edu ${{env.DOKKU}} git:sync ${{ env.APP }} ${{ env.REPO }} ${{ env.BRANCH }}
          if [ $? -ne 0 ]; then
            echo "::error::Dokku git sync failed. Exiting."
            exit 1
          fi
          echo "::endgroup::"
          echo "::notice::dokku git:sync succeeded"
          
      - name: ps:rebuild
        env:
          APP: ${{ steps.get_pr_info.outputs.APP }}
          REPO: ${{ steps.get_pr_info.outputs.REPO }}
          BRANCH: ${{ steps.get_pr_info.outputs.BRANCH }}
          DOKKU: ${{ steps.get_pr_info.outputs.DOKKU }}
        run: |
          echo "::notice:: Executing dokku ps:rebuild"
          echo "::group:: Executing dokku ps:rebuild"
          ssh -i ~/.ssh/id_ed25519 pconrad@csil.cs.ucsb.edu ${{env.DOKKU}} ps:rebuild ${{ env.APP }} 
          echo "::endgroup::"
          if [ $? -ne 0 ]; then
            echo "::error::dokku psLrebuild failed. Exiting."
            exit 1
          fi
          
      - name: notify of success
        env:
          APP: ${{ steps.get_pr_info.outputs.APP }}
          REPO: ${{ steps.get_pr_info.outputs.REPO }}
          BRANCH: ${{ steps.get_pr_info.outputs.BRANCH }}
          DOKKU: ${{ steps.get_pr_info.outputs.DOKKU }}
        run: |
          echo "::notice::PR ${{ github.event.inputs.pr_url }} successfully deployed"
          echo "::notice::Deployed to: https://${{env.APP}}.dokku-${{env.DOKKU}}.cs.ucsb.edu"
  